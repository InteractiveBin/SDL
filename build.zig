const std = @import("std");

pub fn build(b: *std.Build) !void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const sdl_lib = b.addSharedLibrary(.{
        .name = "SDL",
        .target = target,
        .optimize = optimize,
        .link_libc = true,
    });
    const sdl_mod = &sdl_lib.root_module;
    sdl_mod.addCMacro("DLL_EXPORT", "1");

    const c_flags = .{"-std=c99"};
    sdl_lib.linkLibC();

    sdl_mod.addIncludePath(b.path("include"));
    sdl_mod.addIncludePath(b.path("src"));
    sdl_mod.addConfigHeader(buildConfigH(b, target));
    sdl_mod.addSystemIncludePath(b.path("src/video/khronos"));

    sdl_mod.addCSourceFiles(.{
        .flags = &c_flags,
        .files = &base_src_files,
    });

    switch (target.result.os.tag) {
        .windows => {
            sdl_mod.addCSourceFiles(.{
                .flags = &c_flags,
                .files = &windows_src_files,
            });

            for (windows_deps) |sys_lib| {
                sdl_lib.linkSystemLibrary2(sys_lib, .{ .use_pkg_config = .yes });
            }
        },
        .macos => {},
        .linux => {
            sdl_mod.addCSourceFiles(.{
                .flags = &c_flags,
                .files = &linux_src_files,
            });

            try generateWaylandProtocols(b, sdl_lib);

            for (linux_deps) |sys_lib| {
                sdl_lib.linkSystemLibrary2(sys_lib, .{ .use_pkg_config = .force });
            }
        },
        else => {},
    }

    sdl_lib.installHeadersDirectory(b.path("include/SDL3"), "SDL3", .{});
    b.installArtifact(sdl_lib);
}

fn generateWaylandProtocols(b: *std.Build, artifact: *std.Build.Step.Compile) !void {
    // wayland-scanner client-header {xml_file} {proto}-client-protocol.h
    // wayland-scanner private-code {xml_file} {proto}-protocol.c
    const wayland_scanner = "wayland-scanner";
    const wayland_protocols_path = b.path("wayland-protocols");
    std.log.debug("{s}", .{wayland_protocols_path.getPath(b)});
    const xml_dir = try std.fs.openDirAbsolute(wayland_protocols_path.getPath(b), .{ .iterate = true });
    var it = xml_dir.iterate();
    while (try it.next()) |entry| {
        const protocol_xml_path = entry.name;
        const protocol_xml = wayland_protocols_path.path(b, protocol_xml_path);
        const protocol_name = protocol_xml_path[0 .. protocol_xml_path.len - 4];
        {
            const protocol_h = b.fmt("{s}-client-protocol.h", .{protocol_name});
            const cmd = b.addSystemCommand(&.{
                wayland_scanner,
                "client-header",
            });
            cmd.addFileArg(protocol_xml);
            const file = cmd.addOutputFileArg(protocol_h);
            artifact.addIncludePath(file.dirname());
        }
        {
            const protocol_c = b.fmt("{s}-protocol.c", .{protocol_name});
            const cmd = b.addSystemCommand(&.{
                wayland_scanner,
                "private-code",
            });
            cmd.addFileArg(protocol_xml);
            const file = cmd.addOutputFileArg(protocol_c);
            artifact.addCSourceFile(.{ .file = file });
        }
    }
}

fn buildConfigH(b: *std.Build, target: std.Build.ResolvedTarget) *std.Build.Step.ConfigHeader {
    var windows = false;
    var linux = false;
    var macos = false;
    const lazy_linux_deps_values = null;
    switch (target.result.os.tag) {
        .windows => {
            windows = true;
        },
        .linux => {
            linux = true;
        },
        .macos => {
            macos = true;
        },
        else => {},
    }
    const cpu = target.result.cpu;
    const x86 = cpu.arch.isX86();
    const arm = if (@hasDecl(@TypeOf(cpu.arch), "isArm")) cpu.arch.isArm() else cpu.arch.isArmOrThumb(); // Zig 0.13.0 compat
    const aarch64 = cpu.arch.isAARCH64();
    const loongarch = cpu.arch == .loongarch32 or cpu.arch == .loongarch64;
    return b.addConfigHeader(.{
        .style = .{ .cmake = b.path("include/build_config/SDL_build_config.h.cmake") },
        .include_path = "SDL_build_config.h",
    }, .{
        .HAVE_GCC_ATOMICS = windows or linux or macos,
        .HAVE_GCC_SYNC_LOCK_TEST_AND_SET = false,
        .SDL_DISABLE_ALLOCA = false,
        .HAVE_FLOAT_H = windows or linux or macos,
        .HAVE_STDARG_H = windows or linux or macos,
        .HAVE_STDDEF_H = windows or linux or macos,
        .HAVE_STDINT_H = windows or linux or macos,
        .HAVE_LIBC = windows or linux or macos,
        .HAVE_ALLOCA_H = linux or macos,
        .HAVE_ICONV_H = linux or macos,
        .HAVE_INTTYPES_H = windows or linux or macos,
        .HAVE_LIMITS_H = windows or linux or macos,
        .HAVE_MALLOC_H = windows or linux,
        .HAVE_MATH_H = windows or linux or macos,
        .HAVE_MEMORY_H = windows or linux or macos,
        .HAVE_SIGNAL_H = windows or linux or macos,
        .HAVE_STDIO_H = windows or linux or macos,
        .HAVE_STDLIB_H = windows or linux or macos,
        .HAVE_STRINGS_H = windows or linux or macos,
        .HAVE_STRING_H = windows or linux or macos,
        .HAVE_SYS_TYPES_H = windows or linux or macos,
        .HAVE_WCHAR_H = windows or linux or macos,
        .HAVE_PTHREAD_NP_H = false,
        .HAVE_DLOPEN = linux or macos,
        .HAVE_MALLOC = windows or linux or macos,
        .HAVE_FDATASYNC = linux,
        .HAVE_GETENV = windows or linux or macos,
        .HAVE_GETHOSTNAME = linux or macos,
        .HAVE_SETENV = linux or macos,
        .HAVE_PUTENV = windows or linux or macos,
        .HAVE_UNSETENV = linux or macos,
        .HAVE_ABS = windows or linux or macos,
        .HAVE_BCOPY = linux or macos,
        .HAVE_MEMSET = windows or linux or macos,
        .HAVE_MEMCPY = windows or linux or macos,
        .HAVE_MEMMOVE = windows or linux or macos,
        .HAVE_MEMCMP = windows or linux or macos,
        .HAVE_WCSLEN = windows or linux or macos,
        .HAVE_WCSNLEN = windows or linux or macos,
        .HAVE_WCSLCPY = macos,
        .HAVE_WCSLCAT = macos,
        .HAVE_WCSSTR = windows or linux or macos,
        .HAVE_WCSCMP = windows or linux or macos,
        .HAVE_WCSNCMP = windows or linux or macos,
        .HAVE_WCSTOL = windows or linux or macos,
        .HAVE_STRLEN = windows or linux or macos,
        .HAVE_STRNLEN = windows or linux or macos,
        .HAVE_STRLCPY = macos,
        .HAVE_STRLCAT = macos,
        .HAVE_STRPBRK = windows or linux or macos,
        .HAVE__STRREV = windows,
        .HAVE_INDEX = linux or macos,
        .HAVE_RINDEX = linux or macos,
        .HAVE_STRCHR = windows or linux or macos,
        .HAVE_STRRCHR = windows or linux or macos,
        .HAVE_STRSTR = windows or linux or macos,
        .HAVE_STRNSTR = macos,
        .HAVE_STRTOK_R = windows or linux or macos,
        .HAVE_ITOA = windows,
        .HAVE__LTOA = windows,
        .HAVE__UITOA = false,
        .HAVE__ULTOA = windows,
        .HAVE_STRTOL = windows or linux or macos,
        .HAVE_STRTOUL = windows or linux or macos,
        .HAVE__I64TOA = windows,
        .HAVE__UI64TOA = windows,
        .HAVE_STRTOLL = windows or linux or macos,
        .HAVE_STRTOULL = windows or linux or macos,
        .HAVE_STRTOD = windows or linux or macos,
        .HAVE_ATOI = windows or linux or macos,
        .HAVE_ATOF = windows or linux or macos,
        .HAVE_STRCMP = windows or linux or macos,
        .HAVE_STRNCMP = windows or linux or macos,
        .HAVE_VSSCANF = windows or linux or macos,
        .HAVE_VSNPRINTF = windows or linux or macos,
        .HAVE_ACOS = windows or linux or macos,
        .HAVE_ACOSF = windows or linux or macos,
        .HAVE_ASIN = windows or linux or macos,
        .HAVE_ASINF = windows or linux or macos,
        .HAVE_ATAN = windows or linux or macos,
        .HAVE_ATANF = windows or linux or macos,
        .HAVE_ATAN2 = windows or linux or macos,
        .HAVE_ATAN2F = windows or linux or macos,
        .HAVE_CEIL = windows or linux or macos,
        .HAVE_CEILF = windows or linux or macos,
        .HAVE_COPYSIGN = windows or linux or macos,
        .HAVE_COPYSIGNF = windows or linux or macos,
        .HAVE__COPYSIGN = windows,
        .HAVE_COS = windows or linux or macos,
        .HAVE_COSF = windows or linux or macos,
        .HAVE_EXP = windows or linux or macos,
        .HAVE_EXPF = windows or linux or macos,
        .HAVE_FABS = windows or linux or macos,
        .HAVE_FABSF = windows or linux or macos,
        .HAVE_FLOOR = windows or linux or macos,
        .HAVE_FLOORF = windows or linux or macos,
        .HAVE_FMOD = windows or linux or macos,
        .HAVE_FMODF = windows or linux or macos,
        .HAVE_ISINF = windows or linux or macos,
        .HAVE_ISINFF = linux,
        .HAVE_ISINF_FLOAT_MACRO = windows or linux or macos,
        .HAVE_ISNAN = windows or linux or macos,
        .HAVE_ISNANF = linux,
        .HAVE_ISNAN_FLOAT_MACRO = windows or linux or macos,
        .HAVE_LOG = windows or linux or macos,
        .HAVE_LOGF = windows or linux or macos,
        .HAVE_LOG10 = windows or linux or macos,
        .HAVE_LOG10F = windows or linux or macos,
        .HAVE_LROUND = windows or linux or macos,
        .HAVE_LROUNDF = windows or linux or macos,
        .HAVE_MODF = windows or linux or macos,
        .HAVE_MODFF = windows or linux or macos,
        .HAVE_POW = windows or linux or macos,
        .HAVE_POWF = windows or linux or macos,
        .HAVE_ROUND = windows or linux or macos,
        .HAVE_ROUNDF = windows or linux or macos,
        .HAVE_SCALBN = windows or linux or macos,
        .HAVE_SCALBNF = windows or linux or macos,
        .HAVE_SIN = windows or linux or macos,
        .HAVE_SINF = windows or linux or macos,
        .HAVE_SQRT = windows or linux or macos,
        .HAVE_SQRTF = windows or linux or macos,
        .HAVE_TAN = windows or linux or macos,
        .HAVE_TANF = windows or linux or macos,
        .HAVE_TRUNC = windows or linux or macos,
        .HAVE_TRUNCF = windows or linux or macos,
        .HAVE__FSEEKI64 = windows,
        .HAVE_FOPEN64 = windows or linux,
        .HAVE_FSEEKO = windows or linux or macos,
        .HAVE_FSEEKO64 = windows or linux,
        .HAVE_MEMFD_CREATE = linux,
        .HAVE_POSIX_FALLOCATE = linux,
        .HAVE_SIGACTION = linux or macos,
        .HAVE_SA_SIGACTION = linux or macos,
        .HAVE_ST_MTIM = linux,
        .HAVE_SETJMP = linux or macos,
        .HAVE_NANOSLEEP = linux or macos,
        .HAVE_GMTIME_R = linux or macos,
        .HAVE_LOCALTIME_R = linux or macos,
        .HAVE_NL_LANGINFO = linux or macos,
        .HAVE_SYSCONF = linux or macos,
        .HAVE_SYSCTLBYNAME = macos,
        .HAVE_CLOCK_GETTIME = linux,
        .HAVE_GETPAGESIZE = linux or macos,
        .HAVE_ICONV = linux,
        .SDL_USE_LIBICONV = false,
        .HAVE_PTHREAD_SETNAME_NP = linux or macos,
        .HAVE_PTHREAD_SET_NAME_NP = false,
        .HAVE_SEM_TIMEDWAIT = linux,
        .HAVE_GETAUXVAL = linux,
        .HAVE_ELF_AUX_INFO = false,
        .HAVE_POLL = linux or macos,
        .HAVE__EXIT = windows or linux or macos,
        .HAVE_DBUS_DBUS_H = linux,
        .HAVE_FCITX = linux,
        .HAVE_IBUS_IBUS_H = linux,
        .HAVE_INOTIFY_INIT1 = linux,
        .HAVE_INOTIFY = linux,
        .HAVE_LIBUSB = linux,
        .HAVE_O_CLOEXEC = linux or macos,
        .HAVE_LINUX_INPUT_H = linux,
        .HAVE_LIBUDEV_H = linux,
        .HAVE_LIBDECOR_H = linux,
        .HAVE_LIBURING_H = linux,
        .HAVE_DDRAW_H = windows,
        .HAVE_DSOUND_H = windows,
        .HAVE_DINPUT_H = windows,
        .HAVE_XINPUT_H = windows,
        .HAVE_WINDOWS_GAMING_INPUT_H = false,
        .HAVE_GAMEINPUT_H = false,
        .HAVE_DXGI_H = windows,
        .HAVE_DXGI1_6_H = windows,
        .HAVE_MMDEVICEAPI_H = windows,
        .HAVE_TPCSHRD_H = windows,
        .HAVE_ROAPI_H = windows,
        .HAVE_SHELLSCALINGAPI_H = windows,
        .USE_POSIX_SPAWN = false,
        .SDL_DEFAULT_ASSERT_LEVEL_CONFIGURED = false,
        .SDL_DEFAULT_ASSERT_LEVEL = null,
        .SDL_AUDIO_DISABLED = false,
        .SDL_VIDEO_DISABLED = false,
        .SDL_GPU_DISABLED = false,
        .SDL_RENDER_DISABLED = false,
        .SDL_CAMERA_DISABLED = false,
        .SDL_JOYSTICK_DISABLED = false,
        .SDL_HAPTIC_DISABLED = false,
        .SDL_HIDAPI_DISABLED = false,
        .SDL_POWER_DISABLED = false,
        .SDL_SENSOR_DISABLED = false,
        .SDL_DIALOG_DISABLED = false,
        .SDL_THREADS_DISABLED = false,
        .SDL_AUDIO_DRIVER_ALSA = linux,
        .SDL_AUDIO_DRIVER_ALSA_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.alsa_soname}) else "",
        .SDL_AUDIO_DRIVER_OPENSLES = false,
        .SDL_AUDIO_DRIVER_AAUDIO = false,
        .SDL_AUDIO_DRIVER_COREAUDIO = macos,
        .SDL_AUDIO_DRIVER_DISK = windows or linux or macos,
        .SDL_AUDIO_DRIVER_DSOUND = windows,
        .SDL_AUDIO_DRIVER_DUMMY = windows or linux or macos,
        .SDL_AUDIO_DRIVER_EMSCRIPTEN = false,
        .SDL_AUDIO_DRIVER_HAIKU = false,
        .SDL_AUDIO_DRIVER_JACK = linux,
        .SDL_AUDIO_DRIVER_JACK_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.jack_soname}) else "",
        .SDL_AUDIO_DRIVER_NETBSD = false,
        .SDL_AUDIO_DRIVER_OSS = false,
        .SDL_AUDIO_DRIVER_PIPEWIRE = linux,
        .SDL_AUDIO_DRIVER_PIPEWIRE_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.pipewire_soname}) else "",
        .SDL_AUDIO_DRIVER_PULSEAUDIO = linux,
        .SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.pulseaudio_soname}) else "",
        .SDL_AUDIO_DRIVER_SNDIO = linux,
        .SDL_AUDIO_DRIVER_SNDIO_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.sndio_soname}) else "",
        .SDL_AUDIO_DRIVER_WASAPI = windows,
        .SDL_AUDIO_DRIVER_VITA = false,
        .SDL_AUDIO_DRIVER_PSP = false,
        .SDL_AUDIO_DRIVER_PS2 = false,
        .SDL_AUDIO_DRIVER_N3DS = false,
        .SDL_AUDIO_DRIVER_QNX = false,
        .SDL_INPUT_LINUXEV = linux,
        .SDL_INPUT_LINUXKD = linux,
        .SDL_INPUT_FBSDKBIO = false,
        .SDL_INPUT_WSCONS = false,
        .SDL_HAVE_MACHINE_JOYSTICK_H = false,
        .SDL_JOYSTICK_ANDROID = false,
        .SDL_JOYSTICK_DINPUT = windows,
        .SDL_JOYSTICK_DUMMY = false,
        .SDL_JOYSTICK_EMSCRIPTEN = false,
        .SDL_JOYSTICK_GAMEINPUT = false,
        .SDL_JOYSTICK_HAIKU = false,
        .SDL_JOYSTICK_HIDAPI = windows or linux or macos,
        .SDL_JOYSTICK_IOKIT = macos,
        .SDL_JOYSTICK_LINUX = linux,
        .SDL_JOYSTICK_MFI = macos,
        .SDL_JOYSTICK_N3DS = false,
        .SDL_JOYSTICK_PS2 = false,
        .SDL_JOYSTICK_PSP = false,
        .SDL_JOYSTICK_RAWINPUT = windows,
        .SDL_JOYSTICK_USBHID = false,
        .SDL_JOYSTICK_VIRTUAL = windows or linux or macos,
        .SDL_JOYSTICK_VITA = false,
        .SDL_JOYSTICK_WGI = false,
        .SDL_JOYSTICK_XINPUT = windows,
        .SDL_HAPTIC_DUMMY = false,
        .SDL_HAPTIC_LINUX = linux,
        .SDL_HAPTIC_IOKIT = macos,
        .SDL_HAPTIC_DINPUT = windows,
        .SDL_HAPTIC_ANDROID = false,
        .SDL_LIBUSB_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.libusb_soname}) else "",
        .SDL_UDEV_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.libudev_soname}) else "",
        .SDL_PROCESS_DUMMY = false,
        .SDL_PROCESS_POSIX = linux or macos,
        .SDL_PROCESS_WINDOWS = windows,
        .SDL_SENSOR_ANDROID = false,
        .SDL_SENSOR_COREMOTION = false,
        .SDL_SENSOR_WINDOWS = windows,
        .SDL_SENSOR_DUMMY = linux or macos,
        .SDL_SENSOR_VITA = false,
        .SDL_SENSOR_N3DS = false,
        .SDL_LOADSO_DLOPEN = linux or macos,
        .SDL_LOADSO_DUMMY = false,
        .SDL_LOADSO_WINDOWS = windows,
        .SDL_THREAD_GENERIC_COND_SUFFIX = windows,
        .SDL_THREAD_GENERIC_RWLOCK_SUFFIX = windows,
        .SDL_THREAD_PTHREAD = linux or macos,
        .SDL_THREAD_PTHREAD_RECURSIVE_MUTEX = linux or macos,
        .SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP = false,
        .SDL_THREAD_WINDOWS = windows,
        .SDL_THREAD_VITA = false,
        .SDL_THREAD_PSP = false,
        .SDL_THREAD_PS2 = false,
        .SDL_THREAD_N3DS = false,
        .SDL_TIME_UNIX = linux or macos,
        .SDL_TIME_WINDOWS = windows,
        .SDL_TIME_VITA = false,
        .SDL_TIME_PSP = false,
        .SDL_TIME_PS2 = false,
        .SDL_TIME_N3DS = false,
        .SDL_TIMER_HAIKU = false,
        .SDL_TIMER_UNIX = linux or macos,
        .SDL_TIMER_WINDOWS = windows,
        .SDL_TIMER_VITA = false,
        .SDL_TIMER_PSP = false,
        .SDL_TIMER_PS2 = false,
        .SDL_TIMER_N3DS = false,
        .SDL_VIDEO_DRIVER_ANDROID = false,
        .SDL_VIDEO_DRIVER_COCOA = macos,
        .SDL_VIDEO_DRIVER_DUMMY = windows or linux or macos,
        .SDL_VIDEO_DRIVER_EMSCRIPTEN = false,
        .SDL_VIDEO_DRIVER_HAIKU = false,
        .SDL_VIDEO_DRIVER_KMSDRM = linux,
        .SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.drm_soname}) else "",
        .SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.gbm_soname}) else "",
        .SDL_VIDEO_DRIVER_N3DS = false,
        .SDL_VIDEO_DRIVER_OFFSCREEN = windows or linux or macos,
        .SDL_VIDEO_DRIVER_PS2 = false,
        .SDL_VIDEO_DRIVER_PSP = false,
        .SDL_VIDEO_DRIVER_RISCOS = false,
        .SDL_VIDEO_DRIVER_ROCKCHIP = false,
        .SDL_VIDEO_DRIVER_RPI = false,
        .SDL_VIDEO_DRIVER_UIKIT = false,
        .SDL_VIDEO_DRIVER_VITA = false,
        .SDL_VIDEO_DRIVER_VIVANTE = false,
        .SDL_VIDEO_DRIVER_VIVANTE_VDK = false,
        .SDL_VIDEO_DRIVER_OPENVR = false,
        .SDL_VIDEO_DRIVER_WAYLAND = linux,
        .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.wayland_client_soname}) else "",
        .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_CURSOR = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.wayland_cursor_soname}) else "",
        .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_EGL = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.wayland_egl_soname}) else "",
        .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_LIBDECOR = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.libdecor_soname}) else "",
        .SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_XKBCOMMON = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.xkbcommon_soname}) else "",
        .SDL_VIDEO_DRIVER_WINDOWS = windows,
        .SDL_VIDEO_DRIVER_X11 = linux,
        .SDL_VIDEO_DRIVER_X11_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.x11_soname}) else "",
        .SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.xcursor_soname}) else "",
        .SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.xext_soname}) else "",
        .SDL_VIDEO_DRIVER_X11_DYNAMIC_XFIXES = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.xfixes_soname}) else "",
        .SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.xi_soname}) else "",
        .SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.xrandr_soname}) else "",
        .SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.xss_soname}) else "",
        .SDL_VIDEO_DRIVER_X11_HAS_XKBLOOKUPKEYSYM = linux,
        .SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS = linux,
        .SDL_VIDEO_DRIVER_X11_XCURSOR = linux,
        .SDL_VIDEO_DRIVER_X11_XDBE = linux,
        .SDL_VIDEO_DRIVER_X11_XFIXES = linux,
        .SDL_VIDEO_DRIVER_X11_XINPUT2 = linux,
        .SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH = linux,
        .SDL_VIDEO_DRIVER_X11_XRANDR = linux,
        .SDL_VIDEO_DRIVER_X11_XSCRNSAVER = linux,
        .SDL_VIDEO_DRIVER_X11_XSHAPE = linux,
        .SDL_VIDEO_DRIVER_X11_XSYNC = linux,
        .SDL_VIDEO_DRIVER_QNX = false,
        .SDL_VIDEO_RENDER_D3D = windows,
        .SDL_VIDEO_RENDER_D3D11 = windows,
        .SDL_VIDEO_RENDER_D3D12 = windows,
        .SDL_VIDEO_RENDER_GPU = windows or linux or macos,
        .SDL_VIDEO_RENDER_METAL = macos,
        .SDL_VIDEO_RENDER_VULKAN = windows or linux or macos,
        .SDL_VIDEO_RENDER_OGL = windows or linux or macos,
        .SDL_VIDEO_RENDER_OGL_ES2 = windows or linux or macos,
        .SDL_VIDEO_RENDER_PS2 = false,
        .SDL_VIDEO_RENDER_PSP = false,
        .SDL_VIDEO_RENDER_VITA_GXM = false,
        .SDL_VIDEO_OPENGL = windows or linux or macos,
        .SDL_VIDEO_OPENGL_ES = linux,
        .SDL_VIDEO_OPENGL_ES2 = windows or linux or macos,
        .SDL_VIDEO_OPENGL_CGL = macos,
        .SDL_VIDEO_OPENGL_GLX = linux,
        .SDL_VIDEO_OPENGL_WGL = windows,
        .SDL_VIDEO_OPENGL_EGL = windows or linux or macos,
        .SDL_VIDEO_VULKAN = windows or linux or macos,
        .SDL_VIDEO_METAL = macos,
        .SDL_GPU_D3D11 = windows,
        .SDL_GPU_D3D12 = windows,
        .SDL_GPU_VULKAN = windows or linux or macos,
        .SDL_GPU_METAL = macos,
        .SDL_POWER_ANDROID = false,
        .SDL_POWER_LINUX = linux,
        .SDL_POWER_WINDOWS = windows,
        .SDL_POWER_MACOSX = macos,
        .SDL_POWER_UIKIT = false,
        .SDL_POWER_HAIKU = false,
        .SDL_POWER_EMSCRIPTEN = false,
        .SDL_POWER_HARDWIRED = false,
        .SDL_POWER_VITA = false,
        .SDL_POWER_PSP = false,
        .SDL_POWER_N3DS = false,
        .SDL_FILESYSTEM_ANDROID = false,
        .SDL_FILESYSTEM_HAIKU = false,
        .SDL_FILESYSTEM_COCOA = macos,
        .SDL_FILESYSTEM_DUMMY = false,
        .SDL_FILESYSTEM_RISCOS = false,
        .SDL_FILESYSTEM_UNIX = linux,
        .SDL_FILESYSTEM_WINDOWS = windows,
        .SDL_FILESYSTEM_EMSCRIPTEN = false,
        .SDL_FILESYSTEM_VITA = false,
        .SDL_FILESYSTEM_PSP = false,
        .SDL_FILESYSTEM_PS2 = false,
        .SDL_FILESYSTEM_N3DS = false,
        .SDL_STORAGE_STEAM = windows or linux or macos,
        .SDL_FSOPS_POSIX = linux or macos,
        .SDL_FSOPS_WINDOWS = windows,
        .SDL_FSOPS_DUMMY = false,
        .SDL_CAMERA_DRIVER_DUMMY = windows or linux or macos,
        .SDL_CAMERA_DRIVER_DISK = false,
        .SDL_CAMERA_DRIVER_V4L2 = linux,
        .SDL_CAMERA_DRIVER_COREMEDIA = macos,
        .SDL_CAMERA_DRIVER_ANDROID = false,
        .SDL_CAMERA_DRIVER_EMSCRIPTEN = false,
        .SDL_CAMERA_DRIVER_MEDIAFOUNDATION = windows,
        .SDL_CAMERA_DRIVER_PIPEWIRE = linux,
        .SDL_CAMERA_DRIVER_PIPEWIRE_DYNAMIC = if (lazy_linux_deps_values) |x| b.fmt("\"{s}\"", .{x.pipewire_soname}) else "",
        .SDL_CAMERA_DRIVER_VITA = false,
        .SDL_DIALOG_DUMMY = false,
        .SDL_ALTIVEC_BLITTERS = false,
        .DYNAPI_NEEDS_DLOPEN = linux or macos,
        .SDL_USE_IME = linux,
        .SDL_DISABLE_WINDOWS_IME = false,
        .SDL_GDK_TEXTINPUT = false,
        .SDL_IPHONE_KEYBOARD = false,
        .SDL_IPHONE_LAUNCHSCREEN = false,
        .SDL_VIDEO_VITA_PIB = false,
        .SDL_VIDEO_VITA_PVR = false,
        .SDL_VIDEO_VITA_PVR_OGL = false,
        // TODO: figure out linked `libdecor-0` version
        .SDL_LIBDECOR_VERSION_MAJOR = 0,
        .SDL_LIBDECOR_VERSION_MINOR = 2,
        .SDL_LIBDECOR_VERSION_PATCH = 2,
        .SDL_DISABLE_SSE = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse)),
        .SDL_DISABLE_SSE2 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse2)),
        .SDL_DISABLE_SSE3 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse3)),
        .SDL_DISABLE_SSE4_1 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse4_1)),
        .SDL_DISABLE_SSE4_2 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .sse4_2)),
        .SDL_DISABLE_AVX = !(x86 and std.Target.x86.featureSetHas(cpu.features, .avx)),
        .SDL_DISABLE_AVX2 = !(x86 and std.Target.x86.featureSetHas(cpu.features, .avx2)),
        .SDL_DISABLE_AVX512F = !(x86 and std.Target.x86.featureSetHas(cpu.features, .avx512f)),
        .SDL_DISABLE_MMX = !(x86 and std.Target.x86.featureSetHas(cpu.features, .mmx)),
        .SDL_DISABLE_LSX = !(loongarch and std.Target.loongarch.featureSetHas(cpu.features, .lsx)),
        .SDL_DISABLE_LASX = !(loongarch and std.Target.loongarch.featureSetHas(cpu.features, .lasx)),
        .SDL_DISABLE_NEON = !(arm and std.Target.arm.featureSetHas(cpu.features, .neon) or aarch64 and std.Target.aarch64.featureSetHas(cpu.features, .neon)),
    });
}

const base_src_files = [_][]const u8{
    "src/SDL.c",
    "src/SDL_assert.c",
    "src/SDL_error.c",
    "src/SDL_guid.c",
    "src/SDL_hashtable.c",
    "src/SDL_hints.c",
    "src/SDL_list.c",
    "src/SDL_log.c",
    "src/SDL_properties.c",
    "src/SDL_utils.c",
    "src/atomic/SDL_atomic.c",
    "src/atomic/SDL_spinlock.c",
    "src/audio/SDL_audio.c",
    "src/audio/SDL_audiocvt.c",
    "src/audio/SDL_audiodev.c",
    "src/audio/SDL_audioqueue.c",
    "src/audio/SDL_audioresample.c",
    "src/audio/SDL_audiotypecvt.c",
    "src/audio/SDL_mixer.c",
    "src/audio/SDL_wave.c",
    "src/camera/SDL_camera.c",
    "src/core/SDL_core_unsupported.c",
    "src/cpuinfo/SDL_cpuinfo.c",
    "src/dynapi/SDL_dynapi.c",
    "src/events/SDL_categories.c",
    "src/events/SDL_clipboardevents.c",
    "src/events/SDL_displayevents.c",
    "src/events/SDL_dropevents.c",
    "src/events/SDL_events.c",
    "src/events/SDL_keyboard.c",
    "src/events/SDL_keymap.c",
    "src/events/SDL_keysym_to_scancode.c",
    "src/events/SDL_keysym_to_keycode.c",
    "src/events/SDL_mouse.c",
    "src/events/SDL_pen.c",
    "src/events/SDL_quit.c",
    "src/events/SDL_scancode_tables.c",
    "src/events/SDL_touch.c",
    "src/events/SDL_windowevents.c",
    "src/events/imKStoUCS.c",
    "src/file/SDL_asyncio.c",
    "src/file/SDL_iostream.c",
    "src/file/generic/SDL_asyncio_generic.c",
    "src/filesystem/SDL_filesystem.c",
    "src/gpu/SDL_gpu.c",
    "src/haptic/SDL_haptic.c",
    "src/hidapi/SDL_hidapi.c",
    "src/joystick/SDL_gamepad.c",
    "src/joystick/SDL_joystick.c",
    "src/joystick/SDL_steam_virtual_gamepad.c",
    "src/joystick/controller_type.c",
    "src/locale/SDL_locale.c",
    "src/main/SDL_main_callbacks.c",
    "src/main/SDL_runapp.c",
    "src/misc/SDL_url.c",
    "src/power/SDL_power.c",
    "src/render/SDL_d3dmath.c",
    "src/render/SDL_render.c",
    "src/render/SDL_render_unsupported.c",
    "src/render/SDL_yuv_sw.c",
    "src/render/direct3d/SDL_render_d3d.c",
    "src/render/direct3d/SDL_shaders_d3d.c",
    "src/render/direct3d11/SDL_render_d3d11.c",
    "src/render/direct3d11/SDL_shaders_d3d11.c",
    "src/render/direct3d12/SDL_render_d3d12.c",
    "src/render/direct3d12/SDL_shaders_d3d12.c",
    "src/render/gpu/SDL_pipeline_gpu.c",
    "src/render/gpu/SDL_render_gpu.c",
    "src/render/gpu/SDL_shaders_gpu.c",
    "src/render/opengl/SDL_render_gl.c",
    "src/render/opengl/SDL_shaders_gl.c",
    "src/render/opengles2/SDL_render_gles2.c",
    "src/render/opengles2/SDL_shaders_gles2.c",
    "src/render/ps2/SDL_render_ps2.c",
    "src/render/psp/SDL_render_psp.c",
    "src/render/software/SDL_blendfillrect.c",
    "src/render/software/SDL_blendline.c",
    "src/render/software/SDL_blendpoint.c",
    "src/render/software/SDL_drawline.c",
    "src/render/software/SDL_drawpoint.c",
    "src/render/software/SDL_render_sw.c",
    "src/render/software/SDL_rotate.c",
    "src/render/software/SDL_triangle.c",
    "src/render/vitagxm/SDL_render_vita_gxm.c",
    "src/render/vitagxm/SDL_render_vita_gxm_memory.c",
    "src/render/vitagxm/SDL_render_vita_gxm_tools.c",
    "src/render/vulkan/SDL_render_vulkan.c",
    "src/render/vulkan/SDL_shaders_vulkan.c",
    "src/sensor/SDL_sensor.c",
    "src/stdlib/SDL_crc16.c",
    "src/stdlib/SDL_crc32.c",
    "src/stdlib/SDL_getenv.c",
    "src/stdlib/SDL_iconv.c",
    "src/stdlib/SDL_malloc.c",
    "src/stdlib/SDL_memcpy.c",
    "src/stdlib/SDL_memmove.c",
    "src/stdlib/SDL_memset.c",
    "src/stdlib/SDL_mslibc.c",
    "src/stdlib/SDL_murmur3.c",
    "src/stdlib/SDL_qsort.c",
    "src/stdlib/SDL_random.c",
    "src/stdlib/SDL_stdlib.c",
    "src/stdlib/SDL_string.c",
    "src/stdlib/SDL_strtokr.c",
    "src/storage/SDL_storage.c",
    "src/thread/SDL_thread.c",
    "src/time/SDL_time.c",
    "src/timer/SDL_timer.c",
    "src/video/SDL_RLEaccel.c",
    "src/video/SDL_blit.c",
    "src/video/SDL_blit_0.c",
    "src/video/SDL_blit_1.c",
    "src/video/SDL_blit_A.c",
    "src/video/SDL_blit_N.c",
    "src/video/SDL_blit_auto.c",
    "src/video/SDL_blit_copy.c",
    "src/video/SDL_blit_slow.c",
    "src/video/SDL_bmp.c",
    "src/video/SDL_clipboard.c",
    "src/video/SDL_egl.c",
    "src/video/SDL_fillrect.c",
    "src/video/SDL_pixels.c",
    "src/video/SDL_rect.c",
    "src/video/SDL_stretch.c",
    "src/video/SDL_surface.c",
    "src/video/SDL_video.c",
    "src/video/SDL_video_unsupported.c",
    "src/video/SDL_vulkan_utils.c",
    "src/video/SDL_yuv.c",
    "src/video/yuv2rgb/yuv_rgb_lsx.c",
    "src/video/yuv2rgb/yuv_rgb_sse.c",
    "src/video/yuv2rgb/yuv_rgb_std.c",
    "src/dialog/SDL_dialog.c",
    "src/process/SDL_process.c",
    "src/tray/SDL_tray_utils.c",
};

const linux_src_files = [_][]const u8{
    "src/audio/dummy/SDL_dummyaudio.c",
    "src/audio/disk/SDL_diskaudio.c",
    "src/camera/dummy/SDL_camera_dummy.c",
    "src/loadso/dlopen/SDL_sysloadso.c",
    "src/joystick/virtual/SDL_virtualjoystick.c",
    "src/video/dummy/SDL_nullevents.c",
    "src/video/dummy/SDL_nullframebuffer.c",
    "src/video/dummy/SDL_nullvideo.c",
    "src/audio/alsa/SDL_alsa_audio.c",
    "src/audio/jack/SDL_jackaudio.c",
    "src/audio/pipewire/SDL_pipewire.c",
    "src/camera/pipewire/SDL_camera_pipewire.c",
    "src/audio/pulseaudio/SDL_pulseaudio.c",
    "src/audio/sndio/SDL_sndioaudio.c",
    "src/video/x11/SDL_x11clipboard.c",
    "src/video/x11/SDL_x11dyn.c",
    "src/video/x11/SDL_x11events.c",
    "src/video/x11/SDL_x11framebuffer.c",
    "src/video/x11/SDL_x11keyboard.c",
    "src/video/x11/SDL_x11messagebox.c",
    "src/video/x11/SDL_x11modes.c",
    "src/video/x11/SDL_x11mouse.c",
    "src/video/x11/SDL_x11opengl.c",
    "src/video/x11/SDL_x11opengles.c",
    "src/video/x11/SDL_x11pen.c",
    "src/video/x11/SDL_x11settings.c",
    "src/video/x11/SDL_x11shape.c",
    "src/video/x11/SDL_x11touch.c",
    "src/video/x11/SDL_x11video.c",
    "src/video/x11/SDL_x11vulkan.c",
    "src/video/x11/SDL_x11window.c",
    "src/video/x11/SDL_x11xfixes.c",
    "src/video/x11/SDL_x11xinput2.c",
    "src/video/x11/SDL_x11xsync.c",
    "src/video/x11/edid-parse.c",
    "src/video/x11/xsettings-client.c",
    "src/video/kmsdrm/SDL_kmsdrmdyn.c",
    "src/video/kmsdrm/SDL_kmsdrmevents.c",
    "src/video/kmsdrm/SDL_kmsdrmmouse.c",
    "src/video/kmsdrm/SDL_kmsdrmopengles.c",
    "src/video/kmsdrm/SDL_kmsdrmvideo.c",
    "src/video/kmsdrm/SDL_kmsdrmvulkan.c",
    "src/video/wayland/SDL_waylandclipboard.c",
    "src/video/wayland/SDL_waylanddatamanager.c",
    "src/video/wayland/SDL_waylanddyn.c",
    "src/video/wayland/SDL_waylandevents.c",
    "src/video/wayland/SDL_waylandkeyboard.c",
    "src/video/wayland/SDL_waylandmessagebox.c",
    "src/video/wayland/SDL_waylandmouse.c",
    "src/video/wayland/SDL_waylandopengles.c",
    "src/video/wayland/SDL_waylandshmbuffer.c",
    "src/video/wayland/SDL_waylandvideo.c",
    "src/video/wayland/SDL_waylandvulkan.c",
    "src/video/wayland/SDL_waylandwindow.c",
    "src/tray/unix/SDL_tray.c",
    "src/core/unix/SDL_appid.c",
    "src/core/unix/SDL_poll.c",
    "src/camera/v4l2/SDL_camera_v4l2.c",
    "src/haptic/linux/SDL_syshaptic.c",
    "src/core/linux/SDL_dbus.c",
    "src/core/linux/SDL_system_theme.c",
    "src/core/linux/SDL_ime.c",
    "src/core/linux/SDL_ibus.c",
    "src/core/linux/SDL_fcitx.c",
    "src/core/linux/SDL_udev.c",
    "src/core/linux/SDL_evdev.c",
    "src/core/linux/SDL_evdev_kbd.c",
    "src/file/io_uring/SDL_asyncio_liburing.c",
    "src/core/linux/SDL_evdev_capabilities.c",
    "src/core/linux/SDL_threadprio.c",
    "src/joystick/hidapi/SDL_hidapi_combined.c",
    "src/joystick/hidapi/SDL_hidapi_gamecube.c",
    "src/joystick/hidapi/SDL_hidapi_luna.c",
    "src/joystick/hidapi/SDL_hidapi_ps3.c",
    "src/joystick/hidapi/SDL_hidapi_ps4.c",
    "src/joystick/hidapi/SDL_hidapi_ps5.c",
    "src/joystick/hidapi/SDL_hidapi_rumble.c",
    "src/joystick/hidapi/SDL_hidapi_shield.c",
    "src/joystick/hidapi/SDL_hidapi_stadia.c",
    "src/joystick/hidapi/SDL_hidapi_steam.c",
    "src/joystick/hidapi/SDL_hidapi_steam_hori.c",
    "src/joystick/hidapi/SDL_hidapi_steamdeck.c",
    "src/joystick/hidapi/SDL_hidapi_switch.c",
    "src/joystick/hidapi/SDL_hidapi_wii.c",
    "src/joystick/hidapi/SDL_hidapi_xbox360.c",
    "src/joystick/hidapi/SDL_hidapi_xbox360w.c",
    "src/joystick/hidapi/SDL_hidapi_xboxone.c",
    "src/joystick/hidapi/SDL_hidapijoystick.c",
    "src/joystick/linux/SDL_sysjoystick.c",
    "src/thread/pthread/SDL_systhread.c",
    "src/thread/pthread/SDL_sysmutex.c",
    "src/thread/pthread/SDL_syscond.c",
    "src/thread/pthread/SDL_sysrwlock.c",
    "src/thread/pthread/SDL_systls.c",
    "src/thread/pthread/SDL_syssem.c",
    "src/misc/unix/SDL_sysurl.c",
    "src/power/linux/SDL_syspower.c",
    "src/locale/unix/SDL_syslocale.c",
    "src/filesystem/unix/SDL_sysfilesystem.c",
    "src/storage/generic/SDL_genericstorage.c",
    "src/storage/steam/SDL_steamstorage.c",
    "src/filesystem/posix/SDL_sysfsops.c",
    "src/time/unix/SDL_systime.c",
    "src/timer/unix/SDL_systimer.c",
    "src/dialog/SDL_dialog_utils.c",
    "src/dialog/unix/SDL_unixdialog.c",
    "src/dialog/unix/SDL_portaldialog.c",
    "src/dialog/unix/SDL_zenitydialog.c",
    "src/process/posix/SDL_posixprocess.c",
    "src/video/offscreen/SDL_offscreenevents.c",
    "src/video/offscreen/SDL_offscreenframebuffer.c",
    "src/video/offscreen/SDL_offscreenopengles.c",
    "src/video/offscreen/SDL_offscreenvideo.c",
    "src/video/offscreen/SDL_offscreenvulkan.c",
    "src/video/offscreen/SDL_offscreenwindow.c",
    "src/gpu/vulkan/SDL_gpu_vulkan.c",
    "src/sensor/dummy/SDL_dummysensor.c",
    "src/main/generic/SDL_sysmain_callbacks.c",
};

const windows_src_files = [_][]const u8{
    "src/audio/dummy/SDL_dummyaudio.c",
    "src/audio/disk/SDL_diskaudio.c",
    "src/camera/dummy/SDL_camera_dummy.c",
    "src/joystick/virtual/SDL_virtualjoystick.c",
    "src/video/dummy/SDL_nullevents.c",
    "src/video/dummy/SDL_nullframebuffer.c",
    "src/video/dummy/SDL_nullvideo.c",
    "src/core/windows/SDL_hid.c",
    "src/core/windows/SDL_immdevice.c",
    "src/core/windows/SDL_windows.c",
    "src/core/windows/SDL_xinput.c",
    "src/core/windows/pch.c",
    "src/main/windows/SDL_sysmain_runapp.c",
    "src/misc/windows/SDL_sysurl.c",
    "src/audio/directsound/SDL_directsound.c",
    "src/audio/wasapi/SDL_wasapi.c",
    "src/video/windows/SDL_surface_utils.c",
    "src/video/windows/SDL_windowsclipboard.c",
    "src/video/windows/SDL_windowsevents.c",
    "src/video/windows/SDL_windowsframebuffer.c",
    "src/video/windows/SDL_windowsgameinput.c",
    "src/video/windows/SDL_windowskeyboard.c",
    "src/video/windows/SDL_windowsmessagebox.c",
    "src/video/windows/SDL_windowsmodes.c",
    "src/video/windows/SDL_windowsmouse.c",
    "src/video/windows/SDL_windowsopengl.c",
    "src/video/windows/SDL_windowsopengles.c",
    "src/video/windows/SDL_windowsrawinput.c",
    "src/video/windows/SDL_windowsshape.c",
    "src/video/windows/SDL_windowsvideo.c",
    "src/video/windows/SDL_windowsvulkan.c",
    "src/video/windows/SDL_windowswindow.c",
    "src/thread/generic/SDL_syscond.c",
    "src/thread/generic/SDL_sysrwlock.c",
    "src/thread/windows/SDL_syscond_cv.c",
    "src/thread/windows/SDL_sysmutex.c",
    "src/thread/windows/SDL_sysrwlock_srw.c",
    "src/thread/windows/SDL_syssem.c",
    "src/thread/windows/SDL_systhread.c",
    "src/thread/windows/SDL_systls.c",
    "src/sensor/windows/SDL_windowssensor.c",
    "src/power/windows/SDL_syspower.c",
    "src/locale/windows/SDL_syslocale.c",
    "src/filesystem/windows/SDL_sysfilesystem.c",
    "src/filesystem/windows/SDL_sysfsops.c",
    "src/storage/generic/SDL_genericstorage.c",
    "src/storage/steam/SDL_steamstorage.c",
    "src/time/windows/SDL_systime.c",
    "src/timer/windows/SDL_systimer.c",
    "src/loadso/windows/SDL_sysloadso.c",
    "src/core/windows/SDL_hid.c",
    "src/core/windows/SDL_immdevice.c",
    "src/core/windows/SDL_windows.c",
    "src/core/windows/SDL_xinput.c",
    "src/core/windows/pch.c",
    "src/tray/windows/SDL_tray.c",
    "src/joystick/hidapi/SDL_hidapi_combined.c",
    "src/joystick/hidapi/SDL_hidapi_gamecube.c",
    "src/joystick/hidapi/SDL_hidapi_luna.c",
    "src/joystick/hidapi/SDL_hidapi_ps3.c",
    "src/joystick/hidapi/SDL_hidapi_ps4.c",
    "src/joystick/hidapi/SDL_hidapi_ps5.c",
    "src/joystick/hidapi/SDL_hidapi_rumble.c",
    "src/joystick/hidapi/SDL_hidapi_shield.c",
    "src/joystick/hidapi/SDL_hidapi_stadia.c",
    "src/joystick/hidapi/SDL_hidapi_steam.c",
    "src/joystick/hidapi/SDL_hidapi_steam_hori.c",
    "src/joystick/hidapi/SDL_hidapi_steamdeck.c",
    "src/joystick/hidapi/SDL_hidapi_switch.c",
    "src/joystick/hidapi/SDL_hidapi_wii.c",
    "src/joystick/hidapi/SDL_hidapi_xbox360.c",
    "src/joystick/hidapi/SDL_hidapi_xbox360w.c",
    "src/joystick/hidapi/SDL_hidapi_xboxone.c",
    "src/joystick/hidapi/SDL_hidapijoystick.c",
    "src/joystick/windows/SDL_dinputjoystick.c",
    "src/joystick/windows/SDL_rawinputjoystick.c",
    "src/joystick/windows/SDL_windows_gaming_input.c",
    "src/joystick/windows/SDL_windowsjoystick.c",
    "src/joystick/windows/SDL_xinputjoystick.c",
    "src/haptic/windows/SDL_dinputhaptic.c",
    "src/haptic/windows/SDL_windowshaptic.c",
    "src/camera/mediafoundation/SDL_camera_mediafoundation.c",
    "src/dialog/SDL_dialog_utils.c",
    "src/dialog/windows/SDL_windowsdialog.c",
    "src/process/windows/SDL_windowsprocess.c",
    "src/video/offscreen/SDL_offscreenevents.c",
    "src/video/offscreen/SDL_offscreenframebuffer.c",
    "src/video/offscreen/SDL_offscreenopengles.c",
    "src/video/offscreen/SDL_offscreenvideo.c",
    "src/video/offscreen/SDL_offscreenvulkan.c",
    "src/video/offscreen/SDL_offscreenwindow.c",
    "src/gpu/d3d12/SDL_gpu_d3d12.c",
    "src/gpu/vulkan/SDL_gpu_vulkan.c",
    "src/main/generic/SDL_sysmain_callbacks.c",
};

// const macos_src_files = [_][]const u8{};

const linux_deps = [_][]const u8{
    // SYSTEM
    "m",
    "pthread",
    // MISC
    "gbm",
    "libdrm",
    "libusb-1.0",
    "dbus-1",
    "ibus-1.0",
    // SOUND
    "libpulse",
    "libpipewire-0.3",
    "jack",
    "sndio",
    // X11
    "x11",
    "xext",
    "xcursor",
    "xi",
    "xfixes",
    "xrandr",
    "xrender",
    "xscrnsaver",
    // WAYLAND
    "wayland-client",
    "wayland-egl",
    "wayland-cursor",
    "xkbcommon",
    "libdecor-0",
};

const windows_deps = [_][]const u8{
    "m",
    "kernel32",
    "user32",
    "gdi32",
    "winmm",
    "imm32",
    "ole32",
    "oleaut32",
    "version",
    "uuid",
    "advapi32",
    "setupapi",
    "shell32",
    "dinput8",
};
